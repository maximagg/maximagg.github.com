<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Common Lisp | 西瓜熊]]></title>
  <link href="http://maximagg.github.com/blog/categories/common-lisp/atom.xml" rel="self"/>
  <link href="http://maximagg.github.com/"/>
  <updated>2013-01-06T20:34:29+00:00</updated>
  <id>http://maximagg.github.com/</id>
  <author>
    <name><![CDATA[西瓜熊]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Common lisp 光线追踪]]></title>
    <link href="http://maximagg.github.com/blog/2012/12/30/common-lisp-guang-xian-zhui-zong/"/>
    <updated>2012-12-30T16:36:00+00:00</updated>
    <id>http://maximagg.github.com/blog/2012/12/30/common-lisp-guang-xian-zhui-zong</id>
    <content type="html"><![CDATA[<p><img src="/images/blog/cl-ray-tracing.png" title="ray-tracing" alt="Alt text" />
```cl
(defun sq (x) (* x x))
(defun mag (x y z)
  (sqrt (+ (sq x) (sq y) (sq z))))
(defun unit-vector (x y z)
  (let ((d (mag x y z)))</p>

<pre><code>(values (/ x d) (/ y d) (/ z d))))
</code></pre>

<p>(defstruct (point (:conc-name nil)) x y z)
(defun distance (p1 p2)
  (mag (- (x p1) (x p2))</p>

<pre><code>   (- (y p1) (y p2))
   (- (z p1) (z p2))))
</code></pre>

<p>(defun minroot (a b c)
  (if (zerop a)</p>

<pre><code>  (/ (- c) b)
  (let ((disc (- (sq b) (* 4 a c))))
(unless (minusp disc)
  (let ((discrt (sqrt disc)))
    (min (/ (+ (- b) discrt) (* 2 a))
     (/ (- (- b) discrt) (* 2 a))))))))
</code></pre>

<p>(defstruct surface color)
(defparameter <em>world</em> nil)
(defconstant eye (make-point :x 0 :y 0 :z 200))
(defun tracer (pathname &amp;optional (res 1))
  (with-open-file (p pathname :direction :output)</p>

<pre><code>(format p "P2 ~A ~A 255" (* res 100) (* res 100))
(let ((inc (/ res)))
  (do ((y -50 (+ y inc)))
  ((&lt; (- 50 y) inc))
(do ((x -50 (+ x inc)))
    ((&lt; (- 50 x) inc))
  (print (color-at x y ) p))))))
</code></pre>

<p>(defun color-at (x y)
  (multiple-value-bind (xr yr zr)</p>

<pre><code>  (unit-vector (- x (x eye))
       (- y (y eye))
       (- 0 (z eye)))
(round (* (sendray eye xr yr zr) 255))))
</code></pre>

<p>(defun sendray (pt xr yr zr)
  (multiple-value-bind (s int)</p>

<pre><code>  (first-hit pt xr yr zr)
(if s
(* (lambert s int xr yr zr) (surface-color s))
0)))
</code></pre>

<p>(defun first-hit (pt xr yr zr)
  (let (surface hit dist)</p>

<pre><code>(dolist (s *world*)
  (let ((h (intersect s pt xr yr zr)))
(when h
  (let ((d (distance h pt)))
    (when (or (null dist) (&lt; d dist))
      (setf surface s hit h dist d))))))
(values surface hit)))
</code></pre>

<p>(defun lambert (s int xr yr zr)
  (multiple-value-bind (xn yn zn) (normal s int)</p>

<pre><code>(max 0 (+ (* xr xn) (* yr yn) (* zr zn)))))
</code></pre>

<p>(defstruct (sphere (:incude surface))
  radius center)
(defun defsphere (x y z r c)
  (let ((s (make-sphere</p>

<pre><code>    :radius r
    :center (make-point :x x :y y :z z)
    :color c)))
(push s *world*)
s))
</code></pre>

<p>(defun intersect (s pt xr yr zr)
  (funcall (typecase s (sphere #'sphere-intersect))</p>

<pre><code>   s pt xr yr zr))
</code></pre>

<p>(defun sphere-intersect (s pt xr yr zr)
  (let* ((c (shpere-center s))</p>

<pre><code> (n (minroot (+ (sq xr) (sq yr) (sq zr))
         (* 2 (+ (* (- (x pt) (x c)) xr)
             (* (- (y pt) (y c)) yr)
             (* (- (z pt) (z c)) zr)))
         (+ (sq (- (x pt) (x c)))
        (sq (- (y pt) (y c)))
        (sq (- (z pt) (z c)))
        (- (sq (sphere-radius s)))))))
(if n
(make-point :x (+ (x pt) (* n xr))
        :y (+ (y pt) (* n yr))
        :z (+ (z pt) (* n zr))))))
</code></pre>

<p>(defun normal (s pt)
  (funcall (typecase s (sphere-normal))</p>

<pre><code>   s pt))
</code></pre>

<p>(defun sphere-normal (s pt)
  (let ((c (sphere-center s)))</p>

<pre><code>(unit-vector (- (x c) (x pt))
     (- (y c) (y pt))
     (- (z c) (z pt)))))
</code></pre>

<p>(defun ray-test (&amp;optional (res 1))
  (setf <em>world</em> nil)
  (defsphere 0 -300 -1200 200 .8)
  (defsphere -80 -150 -1200 200 .7)
  (defsphere 70 -100 -1200 200 .9)
  (do ((x -2 (1+ x)))</p>

<pre><code>  ((&gt; x 2))
(do ((z 2 (1+ z)))
    ((&gt; z 7))
  (defsphere (* x 200) 300 (* z -400) 40 .75)))
</code></pre>

<p>  (tracer (make-pathname :name "spheres.pgm") res))
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Lisp 控制流]]></title>
    <link href="http://maximagg.github.com/blog/2012/12/30/common-lisp-kong-zhi-liu/"/>
    <updated>2012-12-30T14:48:00+00:00</updated>
    <id>http://maximagg.github.com/blog/2012/12/30/common-lisp-kong-zhi-liu</id>
    <content type="html"><![CDATA[<h2>区块blocks</h2>

<p>common lisp 有三个构造区块block的基本操作符.<br/>
在 progn 主体中的表达式会依序求值，并返回最後一个表达式的值:
<code>cl
(progn
  (format t "a")
  (format t "b")
  (+ 11 12)) ;; return 23
</code>
一个 block 像是带有名字及紧急出口的 progn.第一个实参应为符号.这成为了区块的名字.在主体中的任何地方,可以停止求值,并通过使用 return-from 指定区块的名字,来立即返回数值:
```cl
(block block-name
  (format t "Here we go.")
  (return-from block-name 'with-return-value)
  11)
(block nil
  (block block-name</p>

<pre><code>(format t "Here we go.")
(return 'return-from-nil)
(return-from block-name 'with-return-value)
'not-arrived))    
</code></pre>

<p><code>
许多接受一个表达式主体的 Common Lisp 操作符,皆隐含在一个叫做 nil 的区块里.比如，所有由 do 构造的迭代函数:
</code>cl
(dolist (x '(a b c d e f g h))
  (format t "~A " x)
  (if (eql x 'f)</p>

<pre><code>  (return 'done)))
</code></pre>

<p><code>
defun 定义的函数,都隐含在一个与函数同名的区块里面：
</code>cl
(defun foo ()
  (return-from foo 'ok))
<code>
带标签labels的块:
</code>cl
(tagbody
   (setf x 0)
   top-label
   (setf x (+ x 1))
   (format t "~A " x)
   (if (&lt; x 10) (go top-label)))
```</p>

<h2>语境contex</h2>

<p>let 操作符创造出一个新的语法语境lexical context
```cl
;; 两个表达式等价
(let ((x 7)</p>

<pre><code>  (y 8))
</code></pre>

<p>  (+ x y))
((lambda (x y)
   (+ x y))
   7 8)
```</p>

<h2>条件conditionals</h2>

<p><code>cl
(if t 'ok 'nil)
(if nil 'nil 'ok)
(when t
  (+ 1 2 3)) ;; 6
(unless nil
  (+ 2 3 4)) ;; 9
(cond
  (nil 'not-here)
  (t 'here)
  (t 'here-or-not)) ;; HERE
</code></p>

<h2>迭代iteration</h2>

<p>最基本的是 do
```cl
(do ((i 0 (+ i 1))</p>

<pre><code> (j 0 i))
((&gt; i 10) 'done)
</code></pre>

<p>  (format t "~A " j)) ;; 0 0 1 2 3 4 5 6 7 8 9
```</p>

<h2>多值multiple values</h2>

<p>返回多值
<code>cl
(values 'a 'b 'c)
</code>
接受多值
<code>cl
(multiple-value-bind (x y z) (values 1 2 3)
  (list x y z))
(multiple-value-call #'+ (values 1 2 3))
(multiple-value-list (values 'a 'b 'c))
</code></p>

<h2>终止aborts</h2>

<p>return 在任何时候可以离开一个 block.<br/>
catch 和 throw 从函数中把控制权转移过来.
```cl
(defun super ()
  (catch 'abort</p>

<pre><code>(sub)
(farmat t "We'll never see this.")))
</code></pre>

<p>(defun sub ()
  (throw 'abort 99))
```</p>

<h2>函数functions</h2>

<p>局部函数 使用 labels 定义.
```cl
(labels ((add10 (x) (+ 10 x))</p>

<pre><code> (add99 (x) (+ 99 x)))
</code></pre>

<p>  (add99 (add10 10)))
```
参数列表parameter lists
普通参数又称为必要参数
可选参数   &amp;optional
剩余参数   &amp;rest
关键字参数 &amp;key</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Lisp 基础数据结构]]></title>
    <link href="http://maximagg.github.com/blog/2012/12/29/common-lisp-ji-chu-shu-ju-jie-gou/"/>
    <updated>2012-12-29T21:45:00+00:00</updated>
    <id>http://maximagg.github.com/blog/2012/12/29/common-lisp-ji-chu-shu-ju-jie-gou</id>
    <content type="html"><![CDATA[<h2>构建conses</h2>

<p>```cl
(setf a-cons (cons 'a nil))
(car a-cons)
(cdr a-cons)
(equal (cons 'a</p>

<pre><code>     (cons 'b
       (cons 'c nil)))
   (list 'a 'b 'c))  ;;T
</code></pre>

<p>(consp '(x)) ;;T
(consp 'x) ;;NIL
```</p>

<h2>列表lists</h2>

<p><code>cl
(copy-list '(1 2 3 4 5 a 6))
(cons 'a '(1 2 3 4 5 6))
(car '(1 2 3 4 5 6))
(cdr '(1 2 3 4 5 6))
</code></p>

<h2>Run length encoding</h2>

<p>```cl
(defun compress (x)
  (if (consp x)</p>

<pre><code>  (compr (car x) 1 (cdr x))
  x))
</code></pre>

<p>(defun compr (elt n lst)
  (if (null lst)</p>

<pre><code>  (list (n-elts elt n))
  (let ((next (car lst)))
(if (eql next elt)
    (compr elt (+ n 1) (cdr lst))
    (cons (n-elts elt n)
      (compr next 1 (cdr lst)))))))
</code></pre>

<p>(defun n-elts (elt n)
  (if (> n 1)</p>

<pre><code>  (list n elt)
  elt))
</code></pre>

<p>(setf a-compress-list (compress '(10 1 1 1 1 1 1 1 1 1 8 8 8 8 8 8 1 1 2 2 2 2 2 2 2 2 3)))
(format t "~A" a-compress-list) ;;(10 (9 1) (6 8) (2 1) (8 2) 3)</p>

<p>(defun uncompress (lst)
  (if (null lst)</p>

<pre><code>  nil
  (let ((elt (car lst))
    (rest (uncompress (cdr lst))))
(if (consp elt)
    (append (apply #'list-of elt)
        rest)
    (cons elt rest)))))
</code></pre>

<p>(defun list-of (n elt)
  (if (zerop n)</p>

<pre><code>  nil
  (cons elt (list-of (- n 1) elt))))
</code></pre>

<p>(uncompress a-compress-list) ;;(10 1 1 1 1 1 1 1 1 1 8 8 8 8 8 8 1 1 2 2 2 2 2 2 2 2 3)
```</p>

<h2>Mapping Functions</h2>

<p><code>cl
(mapcar #'(lambda (x) (format t "~A " x)) '( "Hello" 1 2 'a))
</code></p>

<h2>树trees</h2>

<p>```cl
(defun our-copy-tree (tr)
  (if (atom tr)</p>

<pre><code>  tr
  (cons (our-copy-tree (car tr))
    (our-copy-tree (cdr tr)))))
</code></pre>

<p>```</p>

<h2>集合sets</h2>

<p><code>cl
(member 'b '(1 2 3 4 5 6 b c d e f g h)) ;;(B C D E F G H)
(member-if-not #'oddp '(1 2 3 4 5 6 7 8 9))
(adjoin 'a '(1 2 3 4 5 6))
(union '(a b c d e f g) '(1 2 3 4 5 6))
(intersection '(1 2 3 4 5 a b c d e f g h) '(a b c d e f g h 0 9 8 7 6))
(set-difference '(1 2 3 4 5 a b c d e) '(3 4 5 d e g h))
</code></p>

<h2>序列sequences</h2>

<p>序列包括list vector string
```cl
(length '(1 2 3 4 5 6 7 8 9 0 a b c d e f g h))
(subseq '(a b c d e f g h) 0 7)
(reverse '(a b c d e f g 1 2 3 4 5 6))
(reverse "abcdefg123456")</p>

<p>(defun mirror? (s)
  (let ((len (length s)))</p>

<pre><code>(and (evenp len)
 (let ((mid (/ len 2)))
   (equal (subseq s 0 mid)
      (reverse (subseq s mid)))))))
</code></pre>

<p>(mirror? "aa")</p>

<p>(setf a-list-num  '(0 2 3 4 1 11 22 5 44))
(equal (sort a-list-num #'>) '(0 2 3 4 1 11 22 5 44)) ;; NIL sort is destructive
<code>
栈stacks
</code>cl
;; pushdown stack
(setf a-stack nil)
;; use cons
(push 'a a-stack)
(pop a-stack)
;; use adjoin
(let ((x '(a b)))
  (pushnew 'c x)
  (pushnew 'a x)
  x)
```</p>

<h2>点状列表dotted lists</h2>

<p><code>cl
(equal (cons 'a 'b) '(a . b)) ;;T
(equal (cons 'a 'b) '(a b)) ;;NIL
(equal '(a b c d e) '(a . (b . (c . (d . (e . nil)))))) ;;T
'(a b c . d)
</code></p>

<h2>关联列表assoc-lists</h2>

<p>```cl
(setf a-assoc '((+ . "add")</p>

<pre><code>    (- . "substract")))
</code></pre>

<p>(assoc '+ a-assoc)
```</p>

<h2>有向图最短路径shortest path</h2>

<p><code>cl
(setf a-graph '((a b c) (b c) (c d)))
</code>
<img src="/images/blog/cl-a-graph.png" title="assoc-lists" alt="Alt text" />
```cl
(defun shortest-path (start end graph)
  (bfs end (list (list start)) graph))
(defun bfs (end queue graph)
  (if (null graph)</p>

<pre><code>  nil
  (let ((path (car queue)))
(let ((node (car path)))
  (if (eql node end)
      (reverse path)
      (bfs end
       (append (cdr queue)
           (new-paths path node graph))
       graph))))))
</code></pre>

<p>(defun new-paths (path node graph)
  (mapcar #'(lambda (n)</p>

<pre><code>      (cons n path))
  (cdr (assoc node graph))))
</code></pre>

<p>(shortest-path 'a 'd a-graph)
```</p>

<h2>数组array</h2>

<p><code>cl
(setf a-array (make-array '(2 3) :initial-element 0)) ;;#2A((0 0 0) (0 0 0))
(aref a-array 0 0)
(setf (aref a-array 0 1) 'a1)
(setf sec-array (make-array 3 :initial-element 2))
(equal sec-array (vector 2 2 2)) ;;NIL
</code></p>

<h2>二分搜索binary search</h2>

<p>```cl
(defun bin-search (obj vec)
  (let ((len (length vec)))</p>

<pre><code>(and (not (zerop len))
 (finder obj vec 0 (- len 1)))))
</code></pre>

<p>(defun finder (obj vec start end)
  (format t "~A~%" (subseq vec start (+ end 1)))
  (let ((range (- end start)))</p>

<pre><code>(if (zerop range)
(if (eql obj (aref vec start))
    obj
    nil)
(let ((mid (+ start (round (/ range 2)))))
  (let ((obj2 (aref vec mid)))
    (if (&lt; obj obj2)
    (finder obj vec start (- mid 1))
    (if (&gt; obj obj2)
        (finder obj vec (+ mid 1) end)
        obj)))))))
</code></pre>

<p>(bin-search 3 #(0 1 2 3 4 5 6 7 9 10 11 12 13 14 15 16 17 18 19 20))
;; #(0 1 2 3 4 5 6 7 9 10 11 12 13 14 15 16 17 18 19 20)
;; #(12 13 14 15 16 17 18 19 20)
;; #(12 13 14 15)
;; #(12 13)
;; #(13)
;; 13
```</p>

<h2>结构structures</h2>

<p>```cl
(defstruct point x y)
(setf a-point (make-point :x 1 :y 2))
(point-x a-point)
(point-y a-point)
(point-p a-point)
(typep a-point 'point)</p>

<p>(defstruct polemic
  (type (progn</p>

<pre><code>  (format t "What kind of polemic was it? ")
  (read)))
</code></pre>

<p>  (effect nil))
(make-polemic)
```</p>

<h2>哈希表hash table</h2>

<p>```cl
(setf a-ht (make-hash-table))
(gethash 'color a-ht)
(setf (gethash 'color a-ht) 'red)
(remhash 'color a-ht)
(maphash #'(lambda (k v)</p>

<pre><code>     (format t "~A = ~A~%" k v))
 a-ht)
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
