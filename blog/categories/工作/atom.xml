<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 工作 | 西瓜熊]]></title>
  <link href="http://maximagg.github.com/blog/categories/工作/atom.xml" rel="self"/>
  <link href="http://maximagg.github.com/"/>
  <updated>2013-01-06T20:35:34+00:00</updated>
  <id>http://maximagg.github.com/</id>
  <author>
    <name><![CDATA[西瓜熊]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于我的简历]]></title>
    <link href="http://maximagg.github.com/blog/2013/01/04/guan-yu-wo-de-jian-li/"/>
    <updated>2013-01-04T17:10:00+00:00</updated>
    <id>http://maximagg.github.com/blog/2013/01/04/guan-yu-wo-de-jian-li</id>
    <content type="html"><![CDATA[<p>简历我总是感觉好难写，以前是，现在还是。<br/>
不外乎两点：<br/>
一.   没有内容写<br/>
大学的时候读书，玩。自我评价未必比别人付出过更多的努力，虽然在兴趣使然下也看了不少书，但是因为是兴趣的原因，浅如也难深出。<br/>
杂，很多书都看。<br/>
《Linux内核完全剖析》，《操作系统设计与实现》学软件方面的知识，如果不看看内核简直就不好意思出门打招呼。一翻开书不要紧，陷到一片细节的汪洋大海里面去了。启动boot这得会汇编吧，看下汇编语法，Intel语法和AT&amp;T语法，还好虽然形式上不同但是讲的是一样的东西。可是记住内容我就忘了形式，记住了形式就纠结于形式，这是Intel语法，这是AT&amp;T语法。还好实践最重要，照着书本来敲上一遍代码，感觉心里踏实很多了，毕竟过了一遍。编译，把生成的二进制文件复制到软盘镜像文件里面去，启动虚拟机运行了一下，成功在屏幕上打印出了字符串。这时候我就感觉到了Linux系统的好处了，我安装的是Debian，各种软件一个命令了就安装起来了。Makefile自动化编译运行，让我省心了不少。然后开始看内核代码，显然大部分代码是C写的，不然C怎么能称为系统语言呢。不可避免的就要调用一些汇编写的函数，这时候就需要知道调用着和被调用着的约定了。这个过程我学到了最重要的东西就是重复的东西让电脑去做。我们需要思考的是问题是什么，如何解决问题，然后交给电脑做。碍于C的表达能力很多重复的事情我们去一次一次的重复做。重复不是生产力，却是BUG产生的重要原因。<br/>
《Unix环境高级编程》一边看书一边敲代码，调用了很多次的系统的Api，很遗憾没有因为这样敲代码而敲着敲着敲处一个很有用的软件出来。知道了一些Api，也因为枯燥了些，没有完整看完这本书。但是我觉得是一本很好的工具书，也具有不错的收藏价值。<br/>
《深入理解计算机系统》一本号称从程序员的视角，看待计算机系统的书。数据表示提到一个问题叫想当然的问题：在一个32位的机器上用int型变量来存储指针的做法，隐含了这个想法就是指针是32位长的。但是到了64位这个默认的假设条件变化了，引起了不必要的错误。
《离散数学》，《数据结构》，《算法导论》，《Opengl编程指南》，《计算机图形学》等等等。
看了这些书我看出什么来了呢，换句话说，我看了这些书我的能力提高了什么呢。第一次写简历的时候我恨不得把我所知道的所有技术概念唠叨一遍，告诉看我简历的人，这些我都是知道的，你要的以及你不要的东西我都有。现在我重新开始写简历，也是我重新开始审视自己的机会。</p>

<h2>第一个问题我到底能做什么</h2>

<p>编程语言正如简历里面介绍的我自学过的那些语言。很多时候我总是认为语言是很重要的，每种语言表达能力不同，所拥有的工具也不一样，解决的问题也不一样，适合的工具去做恰当的的事情是最重要的。<br/>
离散数学，数据结构，算法导论每个面试官都喜欢提到的，也是对每个软件工作者（我不喜欢程序员这个词，不仅仅是它代表的含义，更重要的是我对它的态度，我不想做一个编码员，而是问题的解决者。思考的角度也会决定你的解决方案优雅与否）的基本要求。但是一个问题，每个人都学习过，在工作中也不断的应用着，对这些知识的了解和应用达到了什么样多的标准才合格呢。我的理解就是这些知识是一个孰能生巧的过程，越有经验的人约能驾驭他们，唯有不断的进取，不断的提炼才能让我不再忐忑，不会疑虑我能否胜任这个问题，让我有更多的信心。</p>

<p>二.   不知道应聘着需要什么<br/>
就像面试官给我一张测试卷，里面是c++的知识测试题，对我说</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的简历]]></title>
    <link href="http://maximagg.github.com/blog/2013/01/04/wo-de-jian-li/"/>
    <updated>2013-01-04T17:08:00+00:00</updated>
    <id>http://maximagg.github.com/blog/2013/01/04/wo-de-jian-li</id>
    <content type="html"><![CDATA[<p>大学我选择了信息与计算科学这个专业，我了解到它是一门交叉专业，大一大二主修数学方面的课程，和软件设计方面没有太大关系，大三开始引入软件设计和开发理论方面的学科，才真正的接触程序和软件开发。
我对这个方面特别有兴趣，也用了很多的精力。在编程语言方面我在学校仅仅学习了C语言这门非常接近硬件的命令式语言。后来我听说C++是一门有着完全不同思想的语言叫做面向对象，我就开始自学了起来，主要学习了面向对象和模板泛型这两个特性方面的知识。后来我广泛了解了很多语言的特性，我又发现了一个很有意思的语言，支持函数式的多范式语言lisp。
熟悉了C语言的语法，非常容易从计算机硬件的角度来思考程序问题，去开发各种基础的数据结构栈，队列，链表，树，图，在这门小巧的语言上我练习了很多算法，搜索，排序，遍历,二分法，贪婪算法等等。C语言对模块的划分主要通过的是开发者命名规则来实现的，对模块内部的隐藏用static这个语法以及文件的切割来实现的。
面向对象让开发大型软件变得更加的容易，对以前模块的复用变的更加自然，对开发大型软件是个非常好的解决方案。C++语言对抽象，封装，继承，多态这基本的面向对象思想有着良好的支持。但是用面向对象这样的思想去设计软件一直给我很多的困惑，有时候感觉很难下手，阅读了很多资料后，因为觉得缺少大项目的实践，依然有无米之炊的感觉。
多范式语言lisp给了我完全不同的感觉，和C++有类似的地方有都内置了基础数据结构的实现，让开发变得容易，对面向对象都有完整的支持，开发大型软件变得容易。不同之处，它支持函数式的风格。递归的思考方式，动态类型和高阶函数的支持，使得数学模型转变成软件比较直观容易。内置列表以及对列表的两个基本操作，让我们不用在纠结在指针层面去思考，而是用递归的方式去处理一个列表。复用不仅仅有面向对象这个方法，高阶函数使得对算法的复用非常的容易。lisp宏定义让我知道了元编程，开发能够改变程序的程序。
我了解到语言仅仅是实现开发软件的一个重要工具，但不是全部，软件工程这门课程给了我一个整体确又模糊的一个概念，一个软件开发的流程，工程实践各个方面的问题，及其解决方法，当然没有完美的方法，但是有一个可行工程实践。
在这个学习过程中让人沮丧的是，我大一大二学习的内容是乎没有什么用武之地。
线性代数主要讲述了有限维向量空间上的线性映射。能够比较容易在计算机中用到的地方有这些。线性映射引入的矩阵及其相关基本算数运算，加，减，乘，逆运算等等。向量空间的一维不变子空间所引入的特征值和特征向量。内积引入的规范正交基，以及正交投影。
微积分微分积分微分积分，曲线，面积，体积,速度，加速度，解析几何。这些知识还是比较容易运用到的。
实分析微积分的理论基础，这么课程讲述了很多抽象的理论，最有意思的是实数的构造，也就是由Cauchy序列来构造。
概率统计还是很容易用到的，数据挖掘这些方面。
数学建模现实中的问题用数学语言描述出来，然后在计算机上计算。
两年的工作经验让我对软件行业有了更多更深入的了解，对我自己的能力也有了新的看法。</p>

<p>工作经历：
2011-5 ~~ 2012-12 苏州美娱<br/>
* 在项目前期技术基础准备阶段，为了验证从BVH格式文件播放骨骼动画的流畅性和真实感，用c++开发了一个基于OpenGL的小的验证演示程序。<br/>
* 多种设备捕获的骨骼动作数据转换成统一格式的分析验证编码实现。<br/>
* 在猫咪中，每个玩家用自己的体感控制器控制角色，和不同的玩家一起互动。<br/>
* 独立创建和开发客户端软件，基于Unity3D游戏引擎。</p>

<p>2010-7 ~~ 2012-5 软通动力<br/>
* 参与到一个团队中从美国把一个项目转移到中国团队来。<br/>
* 转移过来后在团队中做Function Test。</p>

<p>在这个不断变化创新的世界里，不断学习努力进取，这是我对自己现在和未来的要求。</p>
]]></content>
  </entry>
  
</feed>
